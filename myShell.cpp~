#include <iostream>
#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include <stdlib.h>
#include <fstream>
#include <string>
#include <unistd.h>
#include <sys/wait.h>

int main(){

  // Print prompt
  std::cout << "myShell $";
  std::string command_line;
  // Read command from stdin
  std::getline(std::cin,command_line);
  // Check for EOF
  if (std::cin.bad()){
    return EXIT_FAILURE;
  }
  //std::cout << command_line << "\n";
  
  // Check to see if exit
  if (!command_line.compare("exit")){
    return EXIT_SUCCESS;
  }
  

  // Create Fork
  pid_t cpid = fork();

  if (cpid == -1){
    perror("Issue forking");
    return EXIT_FAILURE;
  }
  
  if (cpid == 0){
    // Execute Command
    char tmp_path[] = "/home/ksd15/ece551/mp_miniproject";
    char *path = tmp_path; 
    //char tmp_command[] = "/bin/ls";
    const char *tmp_command = command_line.c_str();
    //const char tmp_command = command_line.c_str();
    const char * argv[] = { tmp_command, path, NULL};
    char *environ[] = { NULL };
    execve(tmp_command, (char * const *)argv, environ);
    perror("We got a problem here...");
    return EXIT_FAILURE;
  }

  else{
    int waitpid_status;
    pid_t rpid = waitpid(cpid, &waitpid_status, 0);

    if (rpid == -1){
      perror("Issue waiting for forked process");
      return EXIT_FAILURE;
    }

    // Print exit or kill message
    if (WIFEXITED(waitpid_status)){
      std::cout << "Program exited with status " << WEXITSTATUS(waitpid_status);
    }
    else if (WIFSIGNALED(waitpid_status)){
      std::cout << "Program was killed by signal " << WTERMSIG(waitpid_status);
    }
  }


    

    //}

  /*
  if (cpid == 0) { 
    //std::cout << "Child PID is " << (long) getpid() << "\n";
    //if (command_line.empty()){
    //  pause();
    //}
  }
  */
  
  
  
  //std::cout << "Program exited with status " << "Unkown";

  return EXIT_SUCCESS;
}
